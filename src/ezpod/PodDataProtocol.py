from abc import ABC, abstractmethod
from typing import Protocol

from pydantic import BaseModel

from typing_extensions import Self

from ezpod.AddrEntry import AddrEntry
from ezpod.pod_group_info import PodGroupInfo


class PodDataProtocol(Protocol):
    @property
    def id(self) -> str: ...
    @property
    def podname(self) -> str: ...
    @property
    def addrs(self) -> list[AddrEntry]: ...
    @property
    def gpu_type(self) -> str: ...
    @property
    def gpu_qty(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def sshaddr(self) -> AddrEntry: ...


class BMPMeta(type(BaseModel), type(Protocol)):
    pass


class InstanceData(Protocol):
    @property
    def id(self) -> str: ...
    @property
    def podname(self) -> PodGroupInfo: ...
    @property
    def addrs(self) -> list[AddrEntry]: ...
    @property
    def gpu_type(self) -> str: ...
    @property
    def gpu_qty(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def sshaddr(self) -> AddrEntry: ...

    @property
    def status(self) -> str: ...
    @property
    def source_file(self) -> str: ...
    @classmethod
    def get_all(cls) -> list[Self]: ...

    def remove_pod(self): ...

    @property
    def is_running(self) -> bool: ...
